/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package br.com.cleo.todoapp.view;

import br.com.cleo.todoapp.controller.TaskController;
import br.com.cleo.todoapp.model.Project;
import br.com.cleo.todoapp.model.Task;
import java.awt.*;
import static java.awt.Font.PLAIN;
import java.awt.event.KeyEvent;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.*;

/**
 *
 * @author Cleo
 */
public class TaskDialogScreen extends javax.swing.JDialog {

    private Project project;
    private Task task;
    private final TaskController taskDAO;
    private final boolean save;

    /**
     * Creates new form ProjectDialogScreen
     *
     * @param parent the parent frame
     * @param modal whether the dialog is modal
     */
    public TaskDialogScreen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        taskDAO = new TaskController();
        hideErrorLabels();
        this.save = true;
    }

    public TaskDialogScreen(java.awt.Frame parent, boolean modal, Task task) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        taskDAO = new TaskController();
        hideErrorLabels();
        this.task = task;
        this.save = false;
        setFields();
    }

    public TaskDialogScreen(java.awt.Frame parent, boolean modal, Task task, Boolean viewOnly) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        taskDAO = new TaskController();
        hideErrorLabels();
        this.task = task;
        this.save = false;
        setFields();
        disableFields();
    }

    private void setFields() {
        jTextFieldName.setText(this.task.getName());
        jTextAreaDescription.setText(this.task.getDescription());
        dateTimePickerDeadLine.setDateTimeStrict(task.getDeadline());
    }

    private void disableFields() {
        jTextFieldName.setEditable(false);
        jTextAreaDescription.setEditable(false);
        dateTimePickerDeadLine.setEnabled(false);
        jLabelIco.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelToolBar = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jLabelIco = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelName = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabelDescription = new javax.swing.JLabel();
        jScrollPaneDescription = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jLabelErrorName = new javax.swing.JLabel();
        jLabelErrorDescription = new javax.swing.JLabel();
        jLabelErrorDeadline = new javax.swing.JLabel();
        jLabelDeadLine = new javax.swing.JLabel();
        dateTimePickerDeadLine = new com.github.lgooddatepicker.components.DateTimePicker();
        JPanelBanner = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanelToolBar.setBackground(new java.awt.Color(0, 153, 102));

        jLabelTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle.setText("Task");

        jLabelIco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelIco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.png"))); // NOI18N
        jLabelIco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelIcoMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelToolBarLayout = new javax.swing.GroupLayout(jPanelToolBar);
        jPanelToolBar.setLayout(jPanelToolBarLayout);
        jPanelToolBarLayout.setHorizontalGroup(
            jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelToolBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelIco, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelToolBarLayout.setVerticalGroup(
            jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelToolBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelIco, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabelName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelName.setText("Nome");

        jTextFieldName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextFieldName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyPressed(evt);
            }
        });

        jLabelDescription.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelDescription.setText("Descrição");

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextAreaDescription.setRows(5);
        jTextAreaDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextAreaDescriptionKeyReleased(evt);
            }
        });
        jScrollPaneDescription.setViewportView(jTextAreaDescription);

        jLabelErrorName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelErrorName.setForeground(new java.awt.Color(255, 51, 51));
        jLabelErrorName.setText("O campo nome é obrigatório");

        jLabelErrorDescription.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelErrorDescription.setForeground(new java.awt.Color(255, 51, 51));
        jLabelErrorDescription.setText("O campo descrição é obrigatório");

        jLabelErrorDeadline.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelErrorDeadline.setForeground(new java.awt.Color(255, 51, 51));
        jLabelErrorDeadline.setText("O campo prazo é obrigatório");

        jLabelDeadLine.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelDeadLine.setText("Prazo");

        dateTimePickerDeadLine.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dateTimePickerDeadLineKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTextFieldName)
            .addComponent(jLabelDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPaneDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
            .addComponent(jLabelDeadLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelErrorName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelErrorDeadline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelErrorDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateTimePickerDeadLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelErrorName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelErrorDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeadLine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelErrorDeadline)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateTimePickerDeadLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        JPanelBanner.setBackground(new java.awt.Color(29, 150, 135));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/task.jpeg"))); // NOI18N

        javax.swing.GroupLayout JPanelBannerLayout = new javax.swing.GroupLayout(JPanelBanner);
        JPanelBanner.setLayout(JPanelBannerLayout);
        JPanelBannerLayout.setHorizontalGroup(
            JPanelBannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JPanelBannerLayout.setVerticalGroup(
            JPanelBannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JPanelBanner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JPanelBanner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelIcoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelIcoMousePressed
        SaveOrUpdate();
    }//GEN-LAST:event_jLabelIcoMousePressed

    private void SaveOrUpdate() {
        if (validateFields()) {

            try {
                if (save) {
                    Task newTask = new Task();
                    newTask.setName(jTextFieldName.getText());
                    newTask.setDescription(jTextAreaDescription.getText());
                    newTask.setDeadline(dateTimePickerDeadLine.getDateTimeStrict());
                    newTask.setCompleted(false);
                    newTask.setProjectId(project.getId());
                    taskDAO.save(newTask);
                    JOptionPane.showMessageDialog(rootPane, "Tarefa salva com sucesso", "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    task.setName(jTextFieldName.getText());
                    task.setDescription(jTextAreaDescription.getText());
                    task.setDeadline(dateTimePickerDeadLine.getDateTimeStrict());
                    taskDAO.update(task);
                    JOptionPane.showMessageDialog(rootPane, "Tarefa atualizada com sucesso", "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                this.dispose();
            } catch (RuntimeException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jTextFieldNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            SaveOrUpdate();
        }
    }//GEN-LAST:event_jTextFieldNameKeyPressed

    private void jTextAreaDescriptionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaDescriptionKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            SaveOrUpdate();
        }
    }//GEN-LAST:event_jTextAreaDescriptionKeyReleased

    private void dateTimePickerDeadLineKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateTimePickerDeadLineKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            SaveOrUpdate();
        }
    }//GEN-LAST:event_dateTimePickerDeadLineKeyPressed

    private void panelConfig(JScrollPane jScrollPaneDescription, JTextArea jTextAreaDescription, JLabel jLabelErrorName) {
        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setFont(new Font("Segoe UI", PLAIN, 14)); // NOI18N
        jTextAreaDescription.setRows(5);
        jScrollPaneDescription.setViewportView(jTextAreaDescription);

        jLabelErrorName.setFont(new Font("Segoe UI", Font.BOLD, 12)); // NOI18N
        jLabelErrorName.setForeground(new Color(255, 51, 51));
    }

    static void panelConfig(JPanel jPanelToolBar, JLabel jLabelTitle, JLabel jLabelIco, JPanel jPanel2) {
        GroupLayout jPanelToolBarLayout = new GroupLayout(jPanelToolBar);
        jPanelToolBar.setLayout(jPanelToolBarLayout);
        jPanelToolBarLayout.setHorizontalGroup(
                jPanelToolBarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelToolBarLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabelTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelIco, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanelToolBarLayout.setVerticalGroup(
                jPanelToolBarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanelToolBarLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelToolBarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabelTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelIco, GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                                .addContainerGap())
        );

        jPanel2.setBackground(new Color(255, 255, 255));
    }

    private void jFormattedTextFieldDeadLineActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jFormattedTextFieldDeadLineActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jFormattedTextFieldDeadLineActionPerformed

//    private void jLabelIcoMousePressed() {// GEN-FIRST:event_jLabelIcoMousePressed
//
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Java swing".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskDialogScreen.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        // </editor-fold>
        // </editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            TaskDialogScreen dialog = new TaskDialogScreen(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanelBanner;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerDeadLine;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDeadLine;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelErrorDeadline;
    private javax.swing.JLabel jLabelErrorDescription;
    private javax.swing.JLabel jLabelErrorName;
    private javax.swing.JLabel jLabelIco;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelToolBar;
    private javax.swing.JScrollPane jScrollPaneDescription;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unused")
    public void setProject(Project project) {
        this.project = project;
    }

    @SuppressWarnings("unused")
    public void setTask(Task task) {
        this.task = task;
    }

    public boolean isValidDate(String date) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/y");
            LocalDate.parse(date, formatter);
            return true;
        } catch (DateTimeException ex) {
            return false;
        }
    }

    public boolean validateFields() {
        hideErrorLabels();
        boolean noErrors = true;
        if (jTextFieldName.getText().isBlank()) {
            showErrorLabel(jLabelErrorName, "O campo nome é obrigatório!");
            noErrors = false;
        }

        if (jTextAreaDescription.getText().isBlank()) {
            showErrorLabel(jLabelErrorDescription, "O campo descrição é obrigatório!");
            noErrors = false;
        }

        if (dateTimePickerDeadLine.toStringStrict().isBlank()) {
            showErrorLabel(jLabelErrorDeadline, "A Data e Hora  do prazo, precisam ser selecionadas!");
            noErrors = false;
        }
        return noErrors;
    }

    public final void hideErrorLabels() {
        jLabelErrorName.setVisible(false);
        jLabelErrorDescription.setVisible(false);
        jLabelErrorDeadline.setVisible(false);
    }

    public void showErrorLabel(JLabel label, String labelText) {
        label.setText(labelText);
        label.setVisible(true);
    }
}
