/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.cleo.todoapp.view;

import br.com.cleo.todoapp.controller.ProjectController;
import br.com.cleo.todoapp.controller.TaskController;
import br.com.cleo.todoapp.model.Project;
import br.com.cleo.todoapp.model.Task;
import br.com.cleo.todoapp.util.Alarm;
import br.com.cleo.todoapp.util.table.CheckBoxEditorRenderer;
import static br.com.cleo.todoapp.util.CreateDB.createDB;
import br.com.cleo.todoapp.util.table.DeadlineColumnCellRendere;
import br.com.cleo.todoapp.util.table.DefaultTableCellRendere;
import br.com.cleo.todoapp.util.table.FilterTasks;
import br.com.cleo.todoapp.util.table.ButtonEditorRenderer;
import br.com.cleo.todoapp.util.table.TaskTableModel;
import java.awt.Color;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Cleo
 */
public class MainScreem extends javax.swing.JFrame {

    private Map<String, Callable<List<Task>>> commands = new HashMap<>();
    private ProjectController projectController;
    private TaskController taskController;
    private Task task;
    private DefaultListModel projectsModel;
    private TaskTableModel tasksModel;
    private CheckBoxEditorRenderer checkBox;
    private ButtonEditorRenderer edit;
    private ButtonEditorRenderer delete;
    private Project project;
    private JPopupMenu jPopupMenu;
    private Alarm alarm;

    /**
     * Creates new form MainScreem
     */
    public MainScreem() {
        createDB();
        initComponents();
        this.setLocationRelativeTo(null);
        initCustonComponnts();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuProjects = new javax.swing.JPopupMenu();
        buttonGroupFilter = new javax.swing.ButtonGroup();
        jPanelToolBar = new javax.swing.JPanel();
        jLabelToolBarTitle = new javax.swing.JLabel();
        jLabelToolBarSubtitle = new javax.swing.JLabel();
        jLabelTime = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jPanelProjects = new javax.swing.JPanel();
        jLabelProjectsTitle = new javax.swing.JLabel();
        jLabelProjectsAdd = new javax.swing.JLabel();
        jPanelTasks = new javax.swing.JPanel();
        jLabelTasksTitle = new javax.swing.JLabel();
        jLabelTasksAdd = new javax.swing.JLabel();
        alarmEnable = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jPanelProjectList = new javax.swing.JPanel();
        jScrollPaneProjects = new javax.swing.JScrollPane();
        jListProjects = new javax.swing.JList<>();
        jPanelTasksList = new javax.swing.JPanel();
        jScrollPaneTasks = new javax.swing.JScrollPane();
        jTableTasks = new javax.swing.JTable();
        jPanelEmptyList = new javax.swing.JPanel();
        jLabelEmptyListIco = new javax.swing.JLabel();
        jLabelEmptyListTitle = new javax.swing.JLabel();
        jLabelEmptyListSubtitle = new javax.swing.JLabel();
        jPanelFilter = new javax.swing.JPanel();
        jRadioButtonAll = new javax.swing.JRadioButton();
        jRadioButtonCompleted = new javax.swing.JRadioButton();
        jRadioButtonNotCompleted = new javax.swing.JRadioButton();
        jRadioButtonExpired = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(1101, 650));

        jPanelToolBar.setBackground(new java.awt.Color(0, 153, 102));

        jLabelToolBarTitle.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabelToolBarTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelToolBarTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tick.png"))); // NOI18N
        jLabelToolBarTitle.setText("ToDo App");
        jLabelToolBarTitle.setToolTipText("");

        jLabelToolBarSubtitle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelToolBarSubtitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelToolBarSubtitle.setText("Anote Tudo, Não Esqueça De Nada");

        jLabelTime.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelTime.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTime.setText("00:00:00");

        jLabelDate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelDate.setForeground(new java.awt.Color(255, 255, 255));
        jLabelDate.setText("00/00/0000");

        javax.swing.GroupLayout jPanelToolBarLayout = new javax.swing.GroupLayout(jPanelToolBar);
        jPanelToolBar.setLayout(jPanelToolBarLayout);
        jPanelToolBarLayout.setHorizontalGroup(
            jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelToolBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelToolBarLayout.createSequentialGroup()
                        .addComponent(jLabelToolBarSubtitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelToolBarLayout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(jLabelDate))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelToolBarLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelTime)))
                        .addContainerGap())
                    .addGroup(jPanelToolBarLayout.createSequentialGroup()
                        .addComponent(jLabelToolBarTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(270, 270, 270))))
        );
        jPanelToolBarLayout.setVerticalGroup(
            jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelToolBarLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabelToolBarTitle)
                .addGroup(jPanelToolBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelToolBarLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabelToolBarSubtitle))
                    .addGroup(jPanelToolBarLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDate)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelProjects.setBackground(new java.awt.Color(255, 255, 255));
        jPanelProjects.setForeground(new java.awt.Color(255, 255, 255));

        jLabelProjectsTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelProjectsTitle.setForeground(new java.awt.Color(0, 153, 102));
        jLabelProjectsTitle.setText("Projetos");

        jLabelProjectsAdd.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelProjectsAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        jLabelProjectsAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelProjectsAddMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelProjectsLayout = new javax.swing.GroupLayout(jPanelProjects);
        jPanelProjects.setLayout(jPanelProjectsLayout);
        jPanelProjectsLayout.setHorizontalGroup(
            jPanelProjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProjectsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelProjectsTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelProjectsAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanelProjectsLayout.setVerticalGroup(
            jPanelProjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProjectsLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelProjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProjectsTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProjectsAdd))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanelTasks.setBackground(new java.awt.Color(255, 255, 255));

        jLabelTasksTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelTasksTitle.setForeground(new java.awt.Color(0, 153, 102));
        jLabelTasksTitle.setText("Tarefas");

        jLabelTasksAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        jLabelTasksAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelTasksAddMousePressed(evt);
            }
        });

        alarmEnable.setBackground(new java.awt.Color(255, 255, 255));
        alarmEnable.setToolTipText("");
        alarmEnable.setBorder(null);
        alarmEnable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        alarmEnable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alarm.png"))); // NOI18N
        jLabel1.setText("Ativar Alarme");

        javax.swing.GroupLayout jPanelTasksLayout = new javax.swing.GroupLayout(jPanelTasks);
        jPanelTasks.setLayout(jPanelTasksLayout);
        jPanelTasksLayout.setHorizontalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTasksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTasksTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(240, 240, 240)
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(alarmEnable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTasksAdd)
                .addGap(25, 25, 25))
        );
        jPanelTasksLayout.setVerticalGroup(
            jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTasksLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(alarmEnable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanelTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTasksTitle)
                            .addComponent(jLabel1))
                        .addComponent(jLabelTasksAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelProjectList.setBackground(new java.awt.Color(255, 255, 255));

        jListProjects.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jListProjects.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListProjects.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListProjects.setFixedCellHeight(40);
        jListProjects.setSelectionBackground(new java.awt.Color(0, 153, 102));
        jListProjects.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListProjectsMousePressed(evt);
            }
        });
        jScrollPaneProjects.setViewportView(jListProjects);

        javax.swing.GroupLayout jPanelProjectListLayout = new javax.swing.GroupLayout(jPanelProjectList);
        jPanelProjectList.setLayout(jPanelProjectListLayout);
        jPanelProjectListLayout.setHorizontalGroup(
            jPanelProjectListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneProjects)
        );
        jPanelProjectListLayout.setVerticalGroup(
            jPanelProjectListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneProjects, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanelTasksList.setBackground(new java.awt.Color(255, 255, 255));
        jPanelTasksList.setLayout(new java.awt.BorderLayout());

        jTableTasks.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTableTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "Descrição", "Prazo", "Tarefa Concluida", "Editar", "Excluir"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTasks.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableTasks.setRowHeight(50);
        jTableTasks.setSelectionBackground(new java.awt.Color(153, 255, 153));
        jTableTasks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableTasks.setShowGrid(false);
        jTableTasks.setShowHorizontalLines(true);
        jTableTasks.setShowVerticalLines(true);
        jTableTasks.getTableHeader().setReorderingAllowed(false);
        jTableTasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableTasksMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableTasksMouseReleased(evt);
            }
        });
        jScrollPaneTasks.setViewportView(jTableTasks);

        jPanelTasksList.add(jScrollPaneTasks, java.awt.BorderLayout.CENTER);

        jPanelEmptyList.setBackground(new java.awt.Color(255, 255, 255));

        jLabelEmptyListIco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEmptyListIco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lists.png"))); // NOI18N

        jLabelEmptyListTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelEmptyListTitle.setForeground(new java.awt.Color(0, 153, 102));
        jLabelEmptyListTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEmptyListTitle.setText("Nenhuma tarefa por aqui :D");

        jLabelEmptyListSubtitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelEmptyListSubtitle.setForeground(new java.awt.Color(102, 102, 102));
        jLabelEmptyListSubtitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEmptyListSubtitle.setText("Clique no botão \"+\" para adicionar uma tarefa");
        jLabelEmptyListSubtitle.setToolTipText("");

        javax.swing.GroupLayout jPanelEmptyListLayout = new javax.swing.GroupLayout(jPanelEmptyList);
        jPanelEmptyList.setLayout(jPanelEmptyListLayout);
        jPanelEmptyListLayout.setHorizontalGroup(
            jPanelEmptyListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelEmptyListTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelEmptyListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEmptyListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelEmptyListIco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelEmptyListSubtitle, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelEmptyListLayout.setVerticalGroup(
            jPanelEmptyListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEmptyListLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelEmptyListIco)
                .addGap(18, 18, 18)
                .addComponent(jLabelEmptyListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelEmptyListSubtitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelTasksList.add(jPanelEmptyList, java.awt.BorderLayout.CENTER);

        jPanelFilter.setBackground(new java.awt.Color(255, 255, 255));
        jPanelFilter.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jRadioButtonAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroupFilter.add(jRadioButtonAll);
        jRadioButtonAll.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jRadioButtonAll.setForeground(new java.awt.Color(0, 153, 102));
        jRadioButtonAll.setSelected(true);
        jRadioButtonAll.setText("Todas");
        jRadioButtonAll.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jRadioButtonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAllActionPerformed(evt);
            }
        });

        jRadioButtonCompleted.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroupFilter.add(jRadioButtonCompleted);
        jRadioButtonCompleted.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jRadioButtonCompleted.setForeground(new java.awt.Color(0, 153, 102));
        jRadioButtonCompleted.setText("Concluídas");
        jRadioButtonCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCompletedActionPerformed(evt);
            }
        });

        jRadioButtonNotCompleted.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroupFilter.add(jRadioButtonNotCompleted);
        jRadioButtonNotCompleted.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jRadioButtonNotCompleted.setForeground(new java.awt.Color(0, 153, 102));
        jRadioButtonNotCompleted.setText("Não Concluídas");
        jRadioButtonNotCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonNotCompletedActionPerformed(evt);
            }
        });

        buttonGroupFilter.add(jRadioButtonExpired);
        jRadioButtonExpired.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jRadioButtonExpired.setForeground(new java.awt.Color(0, 153, 102));
        jRadioButtonExpired.setText("Expiradas");
        jRadioButtonExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonExpiredActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Filtros");

        javax.swing.GroupLayout jPanelFilterLayout = new javax.swing.GroupLayout(jPanelFilter);
        jPanelFilter.setLayout(jPanelFilterLayout);
        jPanelFilterLayout.setHorizontalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonCompleted)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonNotCompleted)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonExpired)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelFilterLayout.setVerticalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFilterLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonAll)
                    .addComponent(jRadioButtonCompleted)
                    .addComponent(jRadioButtonNotCompleted)
                    .addComponent(jRadioButtonExpired)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelProjects, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelProjectList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelTasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelTasksList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelProjects, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelTasks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelProjectList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelTasksList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListProjectsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListProjectsMousePressed
        int selectedIndex = jListProjects.getSelectedIndex();
        if (selectedIndex != -1) {
            loadTasksSelectedProject(selectedIndex);
            Rectangle cellBounds = jListProjects.getCellBounds(selectedIndex, selectedIndex);

            if (SwingUtilities.isRightMouseButton(evt) && cellBounds.contains(evt.getPoint())) {
                jListProjects.setSelectedIndex(jListProjects.locationToIndex(evt.getPoint()));
                jPopupMenu.show(jListProjects, evt.getX(), (evt.getY()));
            }
        }
    }//GEN-LAST:event_jListProjectsMousePressed

    private void jRadioButtonNotCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonNotCompletedActionPerformed
        if (project != null) {
            loadTasks(project.getId());
        }
    }//GEN-LAST:event_jRadioButtonNotCompletedActionPerformed

    private void jRadioButtonCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCompletedActionPerformed
        if (project != null) {
            loadTasks(project.getId());
        }

    }//GEN-LAST:event_jRadioButtonCompletedActionPerformed

    private void jRadioButtonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAllActionPerformed
        if (project != null) {
            loadTasks(project.getId());
        }

    }//GEN-LAST:event_jRadioButtonAllActionPerformed


    private void jRadioButtonExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonExpiredActionPerformed
        if (project != null) {
            loadTasks(project.getId());
        }
    }//GEN-LAST:event_jRadioButtonExpiredActionPerformed

    private void jTableTasksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTasksMousePressed
        int rowIndex = jTableTasks.rowAtPoint(evt.getPoint());
        this.task = tasksModel.getTasks().get(rowIndex);
        task = tasksModel.getTasks().stream()
                .filter((Task t) -> {
                    return Integer.valueOf(t.getId()).equals(jTableTasks.getValueAt(rowIndex, 0));
                })
                .findFirst()
                .orElse(null);
    }//GEN-LAST:event_jTableTasksMousePressed

    private void jTableTasksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTasksMouseReleased
        int rowIndex = jTableTasks.rowAtPoint(evt.getPoint());
        int columnIndex = jTableTasks.columnAtPoint(evt.getPoint());
        switch (columnIndex) {
            case 3 ->
                jTableTasks.getCellEditor(rowIndex, columnIndex).stopCellEditing();
            case 4 ->
                jTableTasks.getCellEditor(rowIndex, columnIndex).stopCellEditing();
            case 5 ->
                jTableTasks.getCellEditor(rowIndex, columnIndex).stopCellEditing();
            default -> {
                if (evt.getClickCount() == 2) {
                    TaskDialogScreen taskDialogScreen = new TaskDialogScreen(this, rootPaneCheckingEnabled, task, true);
                    taskDialogScreen.setVisible(true);
                    taskDialogScreen.dispose();
                }
            }
        }
    }//GEN-LAST:event_jTableTasksMouseReleased

    private void loadTasksSelectedProject(int selectedIndex) {
        project = (Project) projectsModel.get(selectedIndex);
        loadTasks(project.getId());
    }

    private void jLabelProjectsAddMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabelProjectsAddMousePressed
        ProjectDialogScreen projectDialogScreen = new ProjectDialogScreen(this, rootPaneCheckingEnabled);
        projectDialogScreen.setVisible(true);
        projectDialogScreen.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                loadProjects();
                selectLastProject();
            }
        });

    }

    private void jLabelTasksAddMousePressed(java.awt.event.MouseEvent evt) {
        TaskDialogScreen taskDialogScreen = new TaskDialogScreen(this, rootPaneCheckingEnabled);
        taskDialogScreen.setProject(project);
        taskDialogScreen.setVisible(true);
        taskDialogScreen.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                loadTasks(project.getId());
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Java swing".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreem.class
                    .getName()).log(java.util.logging.Level.SEVERE, null,
                            ex);
        }
        // </editor-fold>

        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainScreem().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alarmEnable;
    private javax.swing.ButtonGroup buttonGroupFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelEmptyListIco;
    private javax.swing.JLabel jLabelEmptyListSubtitle;
    private javax.swing.JLabel jLabelEmptyListTitle;
    private javax.swing.JLabel jLabelProjectsAdd;
    private javax.swing.JLabel jLabelProjectsTitle;
    private javax.swing.JLabel jLabelTasksAdd;
    private javax.swing.JLabel jLabelTasksTitle;
    private javax.swing.JLabel jLabelTime;
    private javax.swing.JLabel jLabelToolBarSubtitle;
    private javax.swing.JLabel jLabelToolBarTitle;
    private javax.swing.JList<String> jListProjects;
    private javax.swing.JPanel jPanelEmptyList;
    private javax.swing.JPanel jPanelFilter;
    private javax.swing.JPanel jPanelProjectList;
    private javax.swing.JPanel jPanelProjects;
    private javax.swing.JPanel jPanelTasks;
    private javax.swing.JPanel jPanelTasksList;
    private javax.swing.JPanel jPanelToolBar;
    private javax.swing.JPopupMenu jPopupMenuProjects;
    private javax.swing.JRadioButton jRadioButtonAll;
    private javax.swing.JRadioButton jRadioButtonCompleted;
    private javax.swing.JRadioButton jRadioButtonExpired;
    private javax.swing.JRadioButton jRadioButtonNotCompleted;
    private javax.swing.JScrollPane jScrollPaneProjects;
    private javax.swing.JScrollPane jScrollPaneTasks;
    private javax.swing.JTable jTableTasks;
    // End of variables declaration//GEN-END:variables

    private void initCustonComponnts() {
        jRadioButtonAll.setActionCommand("ALL");
        jRadioButtonCompleted.setActionCommand("COMPLETED");
        jRadioButtonNotCompleted.setActionCommand("NOTCOMPLETED");
        jRadioButtonExpired.setActionCommand("EXPIRED");
        initUpdateClock();
        initDataController();
        initComponentsModel();
        initPopUpMenu();
        decorateTableTasks();
        initCustomListeners();
        initTableSort();
        alarmEnable.setSelected(true);
        alarm = new Alarm();

        Timer timer = new Timer(1000, (ActionEvent e) -> {
            alarmChecker();
        });
        timer.start();

    }

    public void initCustomListeners() {

        checkBox.getCheckbox().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                task.setCompleted(checkBox.getCheckbox().isSelected());
                taskController.update(task);
                loadTasks(project.getId());
            }
        });

        edit.getCheckbox().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                TaskDialogScreen taskDialogScreen = new TaskDialogScreen(null, rootPaneCheckingEnabled, task);
                taskDialogScreen.setProject(project);
                taskDialogScreen.setVisible(true);
                taskDialogScreen.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                        loadTasks(project.getId());
                    }
                });
                loadTasks(project.getId());
            }
        });

        delete.getCheckbox().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                taskController.removeById(task.getId());
                tasksModel.getTasks().remove(task);
                loadTasks(project.getId());
            }
        });
    }

    private void initTableSort() {
        jTableTasks.setAutoCreateRowSorter(true);
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableTasks.getModel());
        sorter.setComparator(2, (String o1, String o2) -> {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm dd/MM/y");
            LocalDateTime ldt1, ldt2;
            ldt1 = LocalDateTime.parse(o1, formatter);
            ldt2 = LocalDateTime.parse(o2, formatter);
            return ldt1.compareTo(ldt2);
        });

        jTableTasks.setRowSorter(sorter);
    }

    /**
     * Customize the table header for the tasks table
     *
     */
    private void decorateTableTasks() {
        this.checkBox = new CheckBoxEditorRenderer();
        this.edit = new ButtonEditorRenderer("edit.png");
        this.delete = new ButtonEditorRenderer("delete.png");
        jTableTasks.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        jTableTasks.getTableHeader().setBackground(new Color(0, 153, 102));
        jTableTasks.getTableHeader().setForeground(new Color(255, 255, 255));
        jTableTasks.getColumnModel().getColumn(0).setMinWidth(0);
        jTableTasks.getColumnModel().getColumn(0).setMaxWidth(0);
        jTableTasks.getColumnModel().getColumn(0).setWidth(0);
        jTableTasks.setDefaultRenderer(Object.class, new DefaultTableCellRendere());
        jTableTasks.getColumnModel().getColumn(3)
                .setCellRenderer(new DeadlineColumnCellRendere());

        jTableTasks.getColumnModel().getColumn(4).setCellRenderer(checkBox);
        jTableTasks.getColumnModel().getColumn(4).setCellEditor(checkBox);

        jTableTasks.getColumnModel().getColumn(5).setCellRenderer(edit);
        jTableTasks.getColumnModel().getColumn(5).setCellEditor(edit);

        jTableTasks.getColumnModel().getColumn(6).setCellRenderer(delete);
        jTableTasks.getColumnModel().getColumn(6).setCellEditor(delete);
    }

    private void initDataController() {
        this.projectController = new ProjectController();
        this.taskController = new TaskController();
    }

    private void initComponentsModel() {
        this.projectsModel = new DefaultListModel<>();
        loadProjects();
        this.tasksModel = new TaskTableModel();

        jTableTasks.setModel(this.tasksModel);
        if (!projectsModel.isEmpty()) {
            jListProjects.setSelectedIndex(0);
            project = (Project) projectsModel.get(0);
            loadTasks(project.getId());
        }
    }

    private void initPopUpMenu() {
        jPopupMenu = new JPopupMenu();
        jPopupMenu.add("Editar Projeto").addActionListener((ActionEvent e) -> {
            ProjectDialogScreen projectDialogScreen = new ProjectDialogScreen(this, rootPaneCheckingEnabled, project);
            projectDialogScreen.setVisible(true);
            projectDialogScreen.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    loadProjects();
                    jListProjects.setSelectedIndex(getIndexOfProject());
                }
            });
        });

        jPopupMenu.add("Excluir Projeto").addActionListener((ActionEvent e) -> {
            projectController.removeById(project.getId());
            loadProjects();
            loadTasks(project.getId());
        });
    }

    /**
     *
     */
    private void loadProjects() {
        List<Project> projects = this.projectController.getAll();
        this.projectsModel.removeAllElements();
        this.projectsModel.addAll(projects);
        jListProjects.setModel(this.projectsModel);
    }

    private void selectLastProject() {
        int lastProject = this.projectsModel.getSize() - 1;
        jListProjects.setSelectedIndex(lastProject);
        loadTasksSelectedProject(lastProject);
    }

    private void loadTasks(int id) {
        List<Task> tasks = filterTasks(this.taskController.getAll(id));
        if (tasks.isEmpty()) {
            showJTableTasks(false);
        } else {
            showJTableTasks(true);
            tasksModel.setTasks(tasks);

        }
    }

    private List<Task> filterTasks(List<Task> tasks) {
        String FilterType = buttonGroupFilter.getSelection().getActionCommand();
        return tasks.stream()
                .filter(FilterTasks
                        .valueOf(FilterType)
                        .getFilter())
                .collect(Collectors.toList());
    }

    private void showJTableTasks(boolean hasTask) {
        if (hasTask) {
            if (jPanelEmptyList.isVisible()) {
                jPanelEmptyList.setVisible(false);
                jPanelTasksList.remove(jPanelEmptyList);
            }
            jPanelTasksList.add(jScrollPaneTasks);
            jScrollPaneTasks.setVisible(true);
            jScrollPaneTasks.setSize(jPanelTasksList.getSize());

        } else {
            if (jScrollPaneTasks.isVisible()) {
                jScrollPaneTasks.setVisible(false);
                jPanelTasksList.remove(jScrollPaneTasks);
            }
            jPanelTasksList.add(jPanelEmptyList);
            jPanelEmptyList.setVisible(true);
            jPanelEmptyList.setSize(jPanelTasksList.getSize());
        }

    }

    private int getIndexOfProject() {
        int size = projectsModel.getSize();
        for (int i = 0; i < size; i++) {
            Project projectList = (Project) projectsModel.get(i);
            if (projectList.getId() == project.getId()) {
                return i;
            }
        }
        return -1;
    }

    private void clock() {
        jLabelTime.setText(LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")));
        jLabelDate.setText(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/y")));
    }

    private void initUpdateClock() {
        clock();
        Timer timer = new Timer(1000, (ActionEvent e) -> {
            clock();
        });
        timer.start();
    }

    private void alarmChecker() {
        if (alarmEnable.isSelected() && !tasksModel.getTasks().isEmpty()) {

            boolean isNow = tasksModel
                    .getTasks()
                    .stream()
                    .anyMatch(e -> {
                        return e.getDeadline()
                                .isEqual(LocalDateTime.now()
                                        .withSecond(0)
                                        .withNano(0))
                                && !e.isCompleted();
                    });

            if (isNow) {
                alarm.play();
                Object[] options = {"OK"};
                JOptionPane.showOptionDialog(this, "Desativar Alarme ", "Alarme",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, options, options[0]);
                alarmEnable.setSelected(false);
                alarm.stop();
            }
        }
    }
}
